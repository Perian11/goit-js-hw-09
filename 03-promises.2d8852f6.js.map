{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GAEpBA,EAAMC,iBACN,MAAQC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,GAAWL,EAAMM,OAGtC,IAAIC,EAAQC,SAASL,EAAMM,OACvBC,EAASF,SAASJ,EAAKK,OAC3B,MAAME,EAAgBH,SAASH,EAAOI,OACtC,IAAIG,EAAW,EAEf,GAAIF,EAAS,GAAKH,EAAQ,GAAKI,GAAiB,EAE9C,YADAjB,EAAAmB,OAAOC,QAAQ,wBAIjB,MAAMC,EAAUC,aAAY,KAmB9B,IAAuBC,EAAUf,GAlB7BU,GAAY,EACRA,EAAWD,GACbO,cAAcH,KAgBGE,EAZLL,EAYeV,EAZLK,EAanB,IAAIY,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUf,IAEpBmB,EAAO,C,SAAEJ,E,MAAUf,GAAQ,GAE5BA,EAAM,KApBNuB,MAAK,EAACR,SAAEA,EAAQf,MAAEA,MACjBR,EAAAmB,OAAOa,QAAQ,uBAAqBT,QAAiBf,MAAU,IAEhEyB,OAAM,EAACV,SAAEA,EAAQf,MAAEA,MAClBR,EAAAmB,OAAOC,QAAQ,sBAAoBG,QAAef,MAAU,IAEhEK,GAASG,EAAM,GACdA,GACHV,EAAMM,OAAOsB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n\n  event.preventDefault();\n  const { delay, step, amount } = event.target;\n\n\n  let delMs = parseInt(delay.value);\n  let stepMs = parseInt(step.value);\n  const countPosition = parseInt(amount.value);\n  let position = 0;\n\n  if (stepMs < 0 || delMs < 0 || countPosition <= 0) {\n    Notify.failure('Invalid input values');\n    return;\n  }\n\n  const timerId = setInterval(() => {\n    position += 1;\n    if (position > countPosition) {\n      clearInterval(timerId);\n\n      return;\n    }\n    createPromise(position, delMs)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delMs += stepMs;\n  }, stepMs);\n  event.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","delay","delay1","step","amount","target","delMs","parseInt","value","stepMs","countPosition","position1","Notify","failure","timerId","setInterval","position","clearInterval","Promise","resolve","reject","setTimeout","Math","random","then","success","catch","reset"],"version":3,"file":"03-promises.2d8852f6.js.map"}